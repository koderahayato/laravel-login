■１、Laravel8環境構築
○ログイン機能の仕組み
①email、パスワードを入力
②データベースと照合
③セッションに保存（ログイン）
※セッションがあるかで判定
④セッションを削除（ログアウト）

.envファイルはgitにあげていはいけない。

■２、データベース設定
○Aparchとブルトインサーバー
・Webサーバー
AparcheやNginxなど
→ブラウザからリクエストし、サーバがページを返す
（アプリをWebサーバ上に乗せる）

・ビルトインウェブサーバー
$php artisan serve
→Webサーバーの設定なしで、ローカル環境にてページの確認が可能
（開発環境用）

○ダミーデータの作成
・Seeder
→データベースにデータを一括登録
・Model Factory
→モデルのテストデータを定義する
・Faker
→ランダムな値を生成する（PHPのライブラリ）

○実際にやってみよう！
１、MAMPでDB作成
２、MAMPでApache設定
３、Migration設定

４、Factory・Seeder設定
→モデル作成→Factory作成、definitionメソッドに生成したいデータを記述→seederのrunメソッドに記載して呼び出し

■３、ログイン画面の作成とバリデーション
○バリデーションについて
・バリデーションのためにLoginFormRequestを作成
→AuthControllerで呼び出し。
→呼び出し方はメソッドの引数に指定するだけ。
→Laravelではサービスコンテナによって自動的に指定したクラスをメソッドインジェクションしてくれる。

★サービスコンテナについて
・依存とは
→プログラムにおける依存とは一言で言うと「クラスAがクラスBに依存している」という状態をいう。
・依存性の注入
→「依存性の注入」を一言で表現すると、「クラス内で使うインスタンスをクラス外から受け取る（注入する）こと」
例えば、クラスA内で使用するクラスBのインスタンスをクラスA内で生成している状態は依存性の注入にはなっていない。

・Laravelのサービスコンテナはコンストラクタやメソッドの引数で設定された肩宣言を自動的に判断し、それに対応するクラスをインスタンス化し、自動でそのインスタンスを注入してくれる。
例）
例えば、つぶやき一覧のシングルアクションコントローラにuse\App\Services\TweetService;でTweetServiceクラスを明示的に設定していたため、__invokeメソッドの引数で設定されたTweetService $tweetServiceからLaravelのサービスコンテナがクラスを自動的に判別、TweetServiceクラスのインスタンスを生成して、$TweetServiceに注入したという動きになる。
